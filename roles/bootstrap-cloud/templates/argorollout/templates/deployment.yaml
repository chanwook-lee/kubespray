apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: rollouts-controller
    app.kubernetes.io/name: argo-rollouts
    app.kubernetes.io/part-of: argo-rollouts
  name: argo-rollouts
spec:
  replicas: {{ .Values.rollout.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/name: argo-rollouts
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: argo-rollouts
    spec:
      containers:
      - imagePullPolicy: Always
        {{- if .Values.global.registry.is_offline }}
        image: {{ .Values.global.registry.private_registry }}/{{ .Values.image.rollout.repository }}:{{ .Values.image.rollout.tag }}
        {{- else }}
        image: {{ .Values.image.rollout.repository }}:{{ .Values.image.rollout.tag }}
        {{- end }}
        {{- if ne .Values.global.time_zone "UTC" }}
        volumeMounts:
        - name: timezone-config
          mountPath: /etc/localtime
        {{- end }}
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: healthz
          initialDelaySeconds: 30
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 10
        name: argo-rollouts
        resources:
          limits:
            cpu: 1
            memory: 1Gi
          requests:
            cpu: 500m
            memory: 500Mi
        command:
        - rollouts-controller
        - --loglevel # debug, info, warn, error
        - {{ .Values.rollout.loglevel }}
        ports:
        - containerPort: 8090
          name: metrics
        - containerPort: 8080
          name: healthz
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /metrics
            port: metrics
          initialDelaySeconds: 10
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 4
      securityContext:
        runAsNonRoot: true
      serviceAccountName: argo-rollouts
      {{- if ne .Values.global.time_zone "UTC" }}
      volumes:
      - name: timezone-config
        hostPath:
          path: {{ printf "%s%s" "/usr/share/zoneinfo/" .Values.global.time_zone }}
      {{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: argo-rollouts-dashboard
    app.kubernetes.io/name: argo-rollouts-dashboard
    app.kubernetes.io/part-of: argo-rollouts
  name: argo-rollouts-dashboard
spec:
  replicas: {{ .Values.rolloutDashboard.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/name: argo-rollouts-dashboard
  template:
    metadata:
      labels:
        app.kubernetes.io/name: argo-rollouts-dashboard
    spec:
      containers:
      - name: argo-rollouts-dashboard
        {{- if .Values.global.registry.is_offline }}
        image: {{ .Values.global.registry.private_registry }}/{{ .Values.image.rolloutDashboard.repository }}:{{ .Values.image.rolloutDashboard.tag }}
        {{- else }}
        image: {{ .Values.image.rolloutDashboard.repository }}:{{ .Values.image.rolloutDashboard.tag }}
        {{- end }}
        {{- if ne .Values.global.time_zone "UTC" }}
        volumeMounts:
        - name: timezone-config
          mountPath: /etc/localtime
        {{- end }}
        ports:
        - containerPort: 3100
        command:
        - kubectl-argo-rollouts
        - dashboard
        - --loglevel # debug, info, warn, error
        - {{ .Values.rolloutDashboard.loglevel }}
        resources:
          limits:
            cpu: 1
            memory: 1Gi
          requests:
            cpu: 500m
            memory: 500Mi
      serviceAccountName: argo-rollouts-dashboard
      {{- if ne .Values.global.time_zone "UTC" }}
      volumes:
      - name: timezone-config
        hostPath:
          path: {{ printf "%s%s" "/usr/share/zoneinfo/" .Values.global.time_zone }}
      {{- end }}
