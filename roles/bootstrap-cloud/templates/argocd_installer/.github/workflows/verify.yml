name: Verify argocd manifest

on:
  pull_request:
    branches: [ "main" ]

  # workflow 수동 세팅 
  workflow_dispatch:
    # inputs:
    #   test_range:
    #     description: '테스트에 포함되어야 할 모듈'
    #     default:  All
    #     type: choice
    #     required: true
    #     options: ['All', 'calico', 'gitlab', 'nexus', 'gitea', 'gatewayBootstrap', 'strimziKafka', 'serviceBinding', 'hyperAuth', 'argocd', 'opensearch', loki, prometheus, grafanaOperator, 'serviceMesh.istio', 'serviceMesh.jaeger', 'serviceMesh.kiali', 'capi', 'capi.providers.aws', 'capi.providers.vsphere', 'tsb', 'catalogController','helmApiserver', 'hyperCloud', 'hyperregistry', 'tektonPipeline', 'tektonTrigger', 'cicd', 'redis', 'imageValidatingWebhook', 'nfs', 'cephfs', 'rbd', 'efs']
      
# job
jobs:
  verify:
    runs-on: ubuntu-latest
    env:
      ARGOCD_VERSION: v2.2.5 
      ARGOCD_CLI_VERSION: v2.5.2
      K8S_VERSION: v1.22.15
      MASTER_APPLICATION: master-applications
      SINGLE_APPLICATION: single-applications
      
    steps:
      - uses: actions/checkout@master


      # kind cluster 생성 
      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.3.0
        with: 
          cluster_name: argocd-testing
          kubectl_version: ${{ env.K8S_VERSION }}
          node_image: kindest/node:${{ env.K8S_VERSION }}


      # argocd 및 cli 설치 
      - name: Install Argocd and Argocd CLI
        run: |
          kubectl create namespace argocd;
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/$ARGOCD_VERSION/manifests/install.yaml;
          kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "NodePort"}}';

          curl -sL -o argocd https://github.com/argoproj/argo-cd/releases/download/$ARGOCD_CLI_VERSION/argocd-linux-amd64;
          chmod +x argocd;
          sudo mv argocd /usr/local/bin/argocd;


      # 설치한 argocd에 로그인 
      - name: Login to Argocd 
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 10
          max_attempts: 10
          command: |
            PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d);
            NODEPORT=$(kubectl get svc -n argocd argocd-server -o jsonpath={.spec.ports[?\(@.port==80\)].nodePort});
            NODE_IP=$(kubectl get nodes -o jsonpath={.items[0].status.addresses[?\(@.type==\"InternalIP\"\)].address});
            argocd login $NODE_IP:$NODEPORT --insecure --username=admin --password=$PASSWORD;


      # master app과 single app을 배포 
      - name: Deploy root application(master, single)
        run: |
          REPO=$(echo $GITHUB_REPOSITORY | cut -d '/' -f2)
          REPO=$GITHUB_SERVER_URL/$GITHUB_ACTOR/$REPO
          BRANCH=$GITHUB_HEAD_REF 
          if [ "$BRANCH" = "" ]
          then
              BRANCH=$GITHUB_REF_NAME;
          fi
          echo Repository=$REPO;
          echo Branch=$BRANCH;
          
          sed -i "s@{{repoURL}}@$REPO@g" .github/template/root-applications.yaml;
          sed -i "s@{{targetRevision}}@$BRANCH@g" .github/template/root-applications.yaml;
          cp .github/template/root-applications.yaml ./master.yaml
          cp .github/template/root-applications.yaml ./single.yaml
          sed -i "s@{{root}}@master@g" master.yaml;
          sed -i "s@{{root}}@single@g" single.yaml;
          kubectl apply -f master.yaml
          kubectl apply -f single.yaml


      # master application sync. 
      - name: Sync argocd master application
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 30
          max_attempts: 5
          command: | 
            argocd app sync $MASTER_APPLICATION;


      # single application sync. 
      - name: Sync argocd single application
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 30
          max_attempts: 5
          command: | 
            argocd app sync $SINGLE_APPLICATION;
      

      # 배포된 application들에 대한 error 검사 
      - name: Sync argocd sub application
        continue-on-error: true
        id: subapp
        run: |
          MODULES=$(kubectl get app -n argocd -o jsonpath={.items[*].metadata.name});     
          for m in $MODULES
          do
            echo "module=$m" >> $GITHUB_OUTPUT; 
            echo "argocd sync checked: $m";
            argocd app sync $m --preview-changes <<<no > /dev/null;
          done


      # 이전 step에서 error가 있었다면 error 출력 
      - name: Check if application error exist
        run: |
          argocd app sync ${{ steps.subapp.outputs.module }} --preview-changes <<<no;
          echo "Checked argocd sub module error successfully";


